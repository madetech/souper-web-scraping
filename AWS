https://github.com/aws/copilot-cli/wiki/Developing-With-Environment-Variables/35856bd30861110ffbb3086d0c686b57b2a3b345

Storage type: Aurora Serverless
Workload name: souper-backend
Storage resource name: souper-backend-cluster
Lifecycle:  No, the storage should be created and deleted at the environment level
Database engine: PostgreSQL
Initial database name: souper_main
✔ Wrote CloudFormation template at copilot/environments/addons/souper-backend-cluster.yml
✔ Wrote CloudFormation parameters at copilot/environments/addons/addons.parameters.yml

copilot env init -n test --import-vpc-id vpc-0fc0c8f2ef1a0a03f --import-public-subnets subnet-0bf192b5dd6b69353 --import-private-subnets subnet-02e30c47c3f7e1073

copilot env init -n souper-scrape-prod --import-vpc-id vpc-0fc0c8f2ef1a0a03f --import-public-subnets subnet-0bf192b5dd6b69353, subnet-0d2e2adab762b69bb --import-private-subnets subnet-02e30c47c3f7e1073, subnet-0c95e599d11257ca8

https://github.com/kataring/aws-copilot-redash

https://towardsthecloud.com/aws-copilot-cli-deploy-containers-tutorial

copilot storage init -t Aurora

frontend/
docker build -m 4g -t frontend:latest .

Run the following commands in the terminal:
csharp
Copy code
terraform init
terraform plan
terraform apply
This Terraform configuration sets up a VPC, two security groups (one for the database and one for the backend), and configures their inbound and outbound rules as described in the previous responses. Make sure to customize the region, port numbers, and security rules as needed.

Please note that this is just a basic example, and in a real-world scenario, you might need to integrate this with your existing infrastructure, configure your FastAPI and PostgreSQL resources, and manage other resources like subnets, route tables, and network ACLs. Also, remember to follow Terraform best practices and security guidelines when managing your infrastructure as code.

Server safety:
example.com:80

EC2 instance
Reverse proxy NGINX
Bastion host
